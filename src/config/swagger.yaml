swagger: "2.0"
info:
  description: "Documentação sobre uso da API do gastarme"
  version: "1.0.0"
  title: "Swagger Gastarme"
host: "localhost:3000"
basePath: "/api"
tags:
  - name: "auth"
    description: "Operations about authenticate"
  - name: "card"
    description: "Operations about cards"
  - name: "product"
    description: "Operations about products"
  - name: "transaction"
    description: "Operations about transaction"
  - name: "payment"
    description: "Operations about payments"
paths:
  /auth/sign_up:
    post:
      tags:
        - "auth"
      operationId: "signUp"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: "successful operation"
        400:
          description: "unsuccessful operation"
          schema:
            $ref: "#/definitions/Error"
  /auth/sign_in:
    post:
      tags:
        - "auth"
      operationId: "signIn"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
              password:
                type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              token:
                type: "string"
        400:
          description: "unsuccessful operation"
          schema:
            $ref: "#/definitions/Error"
  /cards:
    post:
      tags:
        - "card"
      operationId: "createCard"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Card"
      responses:
        201:
          description: "successful operation"
        400:
          description: "unsuccessful operation"
          schema:
            $ref: "#/definitions/Error"
      security:
        - Bearer: []
    get:
      tags:
        - "card"
      operationId: "findAllCard"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Card"
        400:
          description: "unsuccessful operation"
          schema:
            $ref: "#/definitions/Error"
      security:
        - Bearer: []
  /cards/{card_id}:
    delete:
      tags:
        - "card"
      operationId: "destroyCardById"
      parameters:
        - name: "card_id"
          in: "path"
          description: "Card id to delete"
          required: true
          type: "integer"
      responses:
        204:
          description: "successful operation"
        400:
          description: "unsuccessful operation"
          schema:
            $ref: "#/definitions/Error"
      security:
        - Bearer: []
  /products:
    get:
      tags:
        - "product"
      operationId: "findAllProduct"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        400:
          description: "unsuccessful operation"
          schema:
            $ref: "#/definitions/Error"
      security:
        - Bearer: []
  /products/{product_id}:
    get:
      tags:
        - "product"
      operationId: "findOneProductById"
      parameters:
        - name: "product_id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
      security:
        - Bearer: []
  /transactions:
    post:
      tags:
        - "transaction"
      operationId: "createTransaction"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Transaction"
      responses:
        201:
          description: "successful operation"
        400:
          description: "unsuccessful operation"
          schema:
            $ref: "#/definitions/Error"
      security:
        - Bearer: []
    get:
      tags:
        - "transaction"
      operationId: "findAllTransaction"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Transaction"
      security:
        - Bearer: []
  /payments:
    post:
      tags:
        - "payment"
      operationId: "createPayment"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Pay"
      responses:
        201:
          description: "successful operation"
      security:
        - Bearer: []
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: header
definitions:
  Error:
    type: "object"
    properties:
      message:
        type: "string"
  User:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
  Card:
    type: "object"
    properties:
      id:
        type: "string"
      number:
        type: "string"
      holder_name:
        type: "string"
      expiration:
        type: "string"
      security_code:
        type: "string"
      limit:
        type: "number"
      brand:
        type: "string"
  Product:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      photo:
        type: "string"
      price:
        type: "number"
      color:
        type: "string"
  Transaction:
    type: "object"
    properties:
      id:
        type: "integer"
      cards:
        type: "array"
        items:
          type: "object"
          properties:
            card_id:
              type: "string"
      products:
        type: "array"
        items:
          type: "object"
          properties:
            product_id:
              type: "integer"
            quantity:
              type: "integer"
  Pay:
    type: "object"
    properties:
      id:
        type: "integer"
      transactions:
        type: "array"
        items:
          type: "object"
          properties:
            transaction_id:
              type: "integer"
